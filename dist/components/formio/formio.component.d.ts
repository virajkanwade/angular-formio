import { EventEmitter, OnInit, OnChanges, ElementRef } from '@angular/core';
import { FormioService } from '../../formio.service';
import { FormioLoader } from '../loader/formio.loader';
import { FormioAlerts } from '../alerts/formio.alerts';
import { FormioAppConfig } from '../../formio.config';
import { FormioForm, FormioOptions, FormioRefreshValue } from '../../formio.common';
export declare class FormioComponent implements OnInit, OnChanges {
    private loader;
    private config;
    private formioReady;
    private formioReadyResolve;
    form?: FormioForm;
    submission?: any;
    src?: string;
    url?: string;
    service?: FormioService;
    options?: FormioOptions;
    formioOptions?: any;
    renderOptions?: any;
    readOnly?: boolean;
    viewOnly?: boolean;
    hideComponents?: string[];
    refresh?: EventEmitter<FormioRefreshValue>;
    error?: EventEmitter<any>;
    success?: EventEmitter<object>;
    language?: EventEmitter<string>;
    hooks?: any;
    render: EventEmitter<object>;
    customEvent: EventEmitter<object>;
    submit: EventEmitter<object>;
    prevPage: EventEmitter<object>;
    nextPage: EventEmitter<object>;
    beforeSubmit: EventEmitter<object>;
    change: EventEmitter<object>;
    invalid: EventEmitter<boolean>;
    errorChange: EventEmitter<any>;
    formLoad: EventEmitter<any>;
    ready: EventEmitter<FormioComponent>;
    formioElement?: ElementRef;
    private submitting;
    formio: any;
    initialized: boolean;
    alerts: FormioAlerts;
    constructor(loader: FormioLoader, config: FormioAppConfig);
    setForm(form: FormioForm): any;
    initialize(): void;
    ngOnInit(): void;
    onRefresh(refresh: FormioRefreshValue): void;
    ngOnChanges(changes: any): void;
    onPrevPage(data: any): void;
    onNextPage(data: any): void;
    onSubmit(submission: any, saved: boolean): void;
    onError(err: any): void;
    submitExecute(submission: object): void;
    submitForm(submission: any): void;
}
